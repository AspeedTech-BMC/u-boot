/*******************************************************************************
 *
 *
 * Copyright (C) 2004-2014 Emulex. All rights reserved.
 * EMULEX is a trademark of Emulex.
 * www.emulex.com
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 * This program is distributed in the hope that it will be useful. ALL EXPRESS
 * OR IMPLIED CONDITIONS, REPRESENTATIONS AND WARRANTIES, INCLUDING ANY IMPLIED
 * WARRANTY OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR
 * NON-INFRINGEMENT, ARE DISCLAIMED, EXCEPT TO THE EXTENT THAT SUCH DISCLAIMERS
 * ARE HELD TO BE LEGALLY INVALID. See the GNU General Public License for more
 * details, a copy of which can be found in the file COPYING included
 * with this package.
 *
 ********************************************************************************/

		.include "buffer.equ"

#;MACBUFFERS	EQU  0x0408A000		;0x0400C000  	     ;base +32 Kb   ;bank2 start address - 
MACXmitBuffer	=  MAC1XmitBuffer           @;MACBUFFERS			
MACRecvBuffer	=  MAC1RecvBuffer           @;MACBUFFERS+0x4000

#MAC2XmitBuffer           =    Bank2start+0x18000	
#MAC2RecvBuffer           =    Bank2start+0x1D000


MAC1BASE	=  0x40500000	                @@0x40400000
MAC2BASE	=  0x40600000	                @@x40460000
#;Control and status registers
CSR0BMR		=	0x0
CSR1TPDR		=	0x8
CSR2RPDR		=	0x10
CSR3RDBAR	=	0x18
CSR4TDBAR	=	0x20
CSR5SR		=	0x28
CSR6OMR		=	0x30
CSR7IER		=	0x38
CSR8MFOCR	=	0x40
CSR9MIIR		=	0x48
CSR11GPTCR	=	0x58

#;bit definations for bus mode register CSR0
CSR0SWR		=	0x1<<0  		@;S/W reset
CSR0BAR		=	0x1<<1		@;transmit and receive process have equal priority
CSR0DSLMASK	=	0x1f<<2		@;descriptor skip length mask
CSR0BIGEN	=	0x1<<7		@;Big/little endian
CSR0PBL0		=	0x0<<8		@;burst length=0
CSR0PBL1		=	0x1<<8		@;burst length=1
CSR0PBL2		=	0x2<<8		@;burst lenght=2
CSR0PBL4		=	0x4<<8		@;burst length=4
CSR0PBL8		=	0x8<<8		@;burst length=8
CSR0TAPDISABLED	=	0x0<<17		@;transmit automatic polling disabled
CSR0TAP819	=	0x1<<17		@;TAP 819us/81.9us
CSR0TAP245	=	0x2<<17		@;TAP=2.45ms/245us
CSR0TAP573	=	0x3<<17		@;TAP=5.73ms/573us
CSR0TAP512	=	0x4<<17		@;TAP=51.2us/5.12us
CSR0TAP1024	=	0x5<<17		@;TAP=102.4us/10.24 us
CSR0TAP1536	=	0x6<<17		@;TAP=153.6us/15.3us
CSR0TAP3584	=	0x7<<17		@;TAP=358.4us/35.84us	
CSR0DBO		=	0x1<<20		@;big endian mode used for data descriptors

#;bit definations for status register CSR5
CSR5TI		=	0x1<<0		@;Trasmit interrupt indicates frame done
CSR5TPS		=	0x1<<1		@;Transmit process is in stopped state
CSR5TU		=	0x1<<2		@;Trasmit bufferis unavaible ,owned by host not MAC
CSR5UNF		=	0x1<<5		@;Transmit fifo underflow
CSR5RI		=	0x1<<6		@;receive interrupt,recevice frame done
CSR5RU		=	0x1<<7		@;receive buffer unavailable,owned by host not by MAC.
CSR5RPS		=	0x1<<8		@;receive process stopped
CSR5ETI		=	0x1<<10		@;Early transmit interrupt
CSR5GTE		=	0x1<<11		@;general pupose timer expired
CSR5ERI		=	0x1<<14		@;Early receive interrupt
CSR5AIS		=	0x1<<15		@;Abnormal interrupt summary
CSR5NIS		=	0x1<<16		@;Normal interrupt summary
CSR5RS0		=	0x0<<17		@;stopped,reset,stop receive command issued
CSR5RS1		=	0x1<<17		@;running ,feteching receive descriptor
CSR5RS2		=	0x2<<17		@;running,waiting for end of receive pkt.
CSR5RS3		=	0x3<<17		@;running,waiting for receive pkt to be arrived
CSR5RS4		=	0x4<<17		@;suspended,unavailable receive buffer
CSR5RS5		=	0x5<<17		@;running,closing receive descriptor
CSR5RS6		=	0x6<<17 		@;not used
CSR5RS7		=	0x7<<17		@;running,transferring data from fifo to host mem'ry
CSR5RSMASK	=	0x7<<17
CSR5TS0		=	0x0<<20	@;stopped,reset,stop transmit command issued
CSR5TS1		=	0x1<<20		@;running ,feteching transmit descriptor
CSR5TS2		=	0x2<<20		@;running,waiting for end of transmission.
CSR5TS3		=	0x3<<20		@;running,trasferrring data from external mem to fifo
CSR5TS4		=	0x4<<20		@;reserved
CSR5TS5		=	0x5<<20		@;running,setup packet
CSR5TS6		=	0x6<<20 		@;suspended,fifo underflow or unavailable descriptor
CSR5TS7		=	0x7<<20		@;running,closing transmit descriptor
CSR5TSMASK	=	0x7<<20

#;operation mode register bit definations
CSR6HP		=	0x1		@;hash/perfect receive filtering mode
CSR6SR		=	0x1<<1		@;start/stop receive command
CSR6HO		=	0x1<<2		@;hash only filtering mode
CSR6PB		=	0x1<<3		@;pass bad frames.
CSR6IF		=	0x1<<4		@;Inverse filtering
CSR6PR		=	0x1<<6		@;promiscuous mode
CSR6PM		=	0x1<<7		@;pass all multicast
CSR6FD		=	0x1<<9		@;full duplex mode
CSR6ST		=	0x1<<13		@;start/stop transmit command
CSR6TR64_128	=	0x0<<14		@;64bytes in 10mbs/128bytes in case of 100mbs
CSR6TR128_256	=	0x1<<14		@;128bytes in 10mbs/256bytes in case of 100mbs
CSR6TR128_512	=	0x2<<14		@;128bytes in 10mbs/512bytes in case of 100mbs
CSR6TR256_1024	=	0x3<<14		@;256bytes in 10mbs/1024bytes in case of 100mbs
CSR6SF		=	0x1<<21		@;store and forward,send only when full pkt is avaible in fifo
CSR6TTM		=	0x1<<22		@;transmit threshold mode
CSR6RA		=	0x1<<30		@;Receive all
CSR61000        =       0x1<<16         @;1 Gbps
CSR6100         =       0x0<<16         @;100 Mbps
CSR610          =       0x2<<16         @;10 Mbps
CSR6LP          =       0x1<<10         @;Internal Loopback Mode


#;Interrupt Enable register
CSR7TIE		=	0x1		@;Transmit interrupt enable
CSR7TSE		=	0x1<<1		@;Tx processes stopped interrupt enable
CSR7TUE		=	0x1<<2		@;Tx buffer unavailable interrupt enable
CSR7UNE		=	0x1<<5		@;Tx underflow interrupt enable
CSR7RIE		=	0x1<<6		@;Rx interrupt enable
CSR7RUE		=	0x1<<7		@;Rx buffer unavailable interrupt enable
CSR7RSE		=	0x1<<8		@;Rx stopped interrupt enable
CSR7ETE		=	0x1<<10		@;early transmit interrupt enable
CSR7GTE		=	0x1<<11		@;general-purpose timer overflow interrupt enable
CSR7ERE		=	0x1<<14		@;early receive interrupt enable
CSR7AIE		=	0x1<<15		@;Abnormal interrupt summary enable
CSR7NIE		=	0x1<<16		@;Normal interrupt summary enable

#;Missed frame and overflow counter register
CSR8MFCMASK	=	0xffff		@;missed frame counter
CSR8MFO		=	0x1<<16		@;missed frame overflow
CSR8FOCMASK	=	0x3ff<<17	@;fifo overflow counter
CSR8OCO		=	0x1<<28		@;overflow counter overflow

CSR9SCS		=	0x1		@;Serial Rom chip select
CSR9SCLK		=	0x1<<1		@;Serial rom clock
CSR9SDI		=	0x1<<2		@;Serial rom data input
CSR9SDO		=	0x1<<3		@;serial rom data output
CSR9MDC		=	0x1<<16		@;MII management clock
CSR9MDO		=	0x1<<17		@;MII management write data
CSR9MII		=	0x1<<18		@;MII management operations mode
CSR9MDI		=	0x1<<19		@;MII management data in signal

#;general-purpose timer and interrupt mitigation control register
CSR11TIM		=	0x1		@;timer value
CSR11CON		=	0x1<<16		@;timer works in continous mode
CSR11NRP00	=	0x0<<17		@;disable receive interrupt mitigation
CSR11NRP01	=	0x1<<17		@;receive interrupt is generated after one frames
CSR11NRP02	=	0x2<<17		@;receive interrupt is generated after two frames
CSR11NRP03	=	0x3<<17		@;receive interrupt is generated after three frames
CSR11NRP04	=	0x4<<17		@;receive interrupt is generated after four frames
CSR11NRP05	=	0x5<<17		@;receive interrupt is generated after five frames
CSR11NRP06	=	0x6<<17		@;receive interrupt is generated after six frames
CSR11NRP07	=	0x7<<17		@;receive interrupt is generated after seven frames
CSR11RTMASK	=	0xf<<20		@;receive timer
CSR11NTP00	=	0x0<<24		@;disable transmit interrupt mitigation mechanism
CSR11NTP01	=	0x1<<24		@;transmit interrupt is generated after one frame
CSR11NTP02	=	0x2<<24		@;transmit interrupt is generated after two frames
CSR11NTP03	=	0x3<<24		@;transmit interrupt is generated after three frames
CSR11NTP04	=	0x4<<24		@;transmit interrupt is generated after four frames
CSR11NTP05	=	0x5<<24		@;transmit interrupt is generated after five frames
CSR11NTP06	=	0x6<<24		@;transmit interrupt is generated after six frames
CSR11NTP07	=	0x7<<24		@;transmit interrupt is generated after seven frames
CSR11TT		=	0xf<<27		@;transmit timer
CSR11CS		=	0x1<<31		@;mii 100mb mode 5.12us/10mb mode 51.2us else 81.92us/819.2us

#;Receive descriptor word 0 bit definations
RDES0ZERO	=	0x1<<0		@;this bit is cleared for legal length frames
RDES0CE		=	0x1<<1		@;when set indicates CRC error in receive pkt.
RDES0DB		=	0x1<<2		@;dribbling bit,when set indicates that frame was not byte aligned.
RDES0RE		=	0x1<<3		@;error reported from MII.
RDES0FT		=	0x1<<5		@;when set,indicates frame length is greater than 1500bytes.
RDES0CS		=	0x1<<6		@;collision detected
RDES0TL		=	0x1<<7		@;frame too long
RDES0LS		=	0x1<<8		@;when set indicates,this is last descriptor of a frame.
RDES0FS		=	0x1<<9		@;when set,indicates this is first descriptor of a frame.
RDES0MF		=	0x1<<10		@;indicates that the frame has multicast address.
RDES0RF		=	0x1<<11		@;runt frame,frame is damaged by collision or premature-termination.
RDES0DE		=	0x1<<14		@;descriptor error
RDES0ES		=	0x1<<15		@;error summary(RDES0.1+RDES0.6+RDES0.7+RDES0.11+RDES0.14)
RDES0FLMASK	=	0x3fff		@;frame length
RDES0FF		=	0x1<<30		@;Filtering fail,receive frame did not pass address recognition process
RDES0OWN		=	0x1<<31		@;Ownership bit

#;Receive descriptor word1 bit defination
RDES1RCH		=	0x1<<24		@;second address chained.
RDES1RER		=	0x1<<25		@;when set,indicates that this is last descriptor in the RING descriptor.

#;Transmit descriptor word 0 bit definations..
TDES0DE		=	0x1		@;when set indicates that the frame was deffered before transmison.
TDES0UF		=	0x1<<1		@;transmit fifo underflow error.
TDES0CC		=	0xf<<3		@;collision count
TDES0EC		=	0x1<<8		@;excessive collisions,ie more than 16
TDES0LC		=	0x1<<9		@;late collision,after tx'miting 64 bytes.
TDES0NC		=	0x1<<10		@;indicates that carrier was not asserted by external xver.
TDES0LO		=	0x1<<11		@;indicates loss of carrier during xmision.
TDES0ES		=	0x1<<15		@;Error summary(TDES0.1+TDES0.8+TDES0.9+TDES0.10+TDES0.11)
TDES0OWN		=	0x1<<31		@;ownership bit

#;Transmit descriptor woed1 bit definations
TDES1FTO		=	0x1<<22		@;filtering type
TDES1DPD		=	0x1<<23		@;disable padding,when set automatic padding is disabled.
TDES1TCH		=	0x1<<24		@;second address is chained to descriptor not to data buffer.
TDES1TER		=	0x1<<25		@;transmit end of ring,last descriptor in descriptors ring.
TDES1AC		=	0x1<<26		@;Add CRC disabled.
TDES1SET		=	0x1<<27		@;setup packet.
TDES1FT1		=	0x1<<28		@;filtering type.
TDES1FS		=	0x1<<29		@;first descriptor
TDES1LS		=	0x1<<30		@;last descriptor
TDES1IC		=	0x1<<31		@;Interrupt on completion.



TD1		=	MAC1WORKBASE		@0x0408A000
TD2		=	MAC1WORKBASE+0x10
TD3		=	MAC1WORKBASE+0x20
TD4		=	MAC1WORKBASE+0x30
TD5		=	MAC1WORKBASE+0x40
TD6		=	MAC1WORKBASE+0x50
TD7		=	MAC1WORKBASE+0x60
TD8		=	MAC1WORKBASE+0x70
TD9		=	MAC1WORKBASE+0x80
TD10		=	MAC1WORKBASE+0x90
TD11		=	MAC1WORKBASE+0xa0
TD12		=	MAC1WORKBASE+0xb0
TD13		=	MAC1WORKBASE+0xc0
TD14		=	MAC1WORKBASE+0xd0
TD15		=	MAC1WORKBASE+0xe0



TD31		=	MAC2WORKBASE		
TD32		=	MAC2WORKBASE+0x10
TD33		=	MAC2WORKBASE+0x20
TD34		=	MAC2WORKBASE+0x30
TD35		=	MAC2WORKBASE+0x40
TD36		=	MAC2WORKBASE+0x50
TD37		=	MAC2WORKBASE+0x60
TD38		=	MAC2WORKBASE+0x70
TD39		=	MAC2WORKBASE+0x80
TD40		=	MAC2WORKBASE+0x90
TD41		=	MAC2WORKBASE+0xa0
TD42		=	MAC2WORKBASE+0xb0
TD43		=	MAC2WORKBASE+0xc0
TD44		=	MAC2WORKBASE+0xd0
TD45		=	MAC2WORKBASE+0xe0



@PASSADDR	=  MAC1WORKBASE+0x200
@FAILADDR	=  MAC1WORKBASE+0x210
MAC1TIFLAG		=  MAC1WORKBASE+0x220
MAC1RIFLAG		=  MAC1WORKBASE+0x230

MAC2TIFLAG		=  MAC1WORKBASE+0x240
MAC2RIFLAG		=  MAC1WORKBASE+0x250


RD1		=	MAC1WORKBASE+0x400		
RD2		=	MAC1WORKBASE+0x410	
RD3		=	MAC1WORKBASE+0x420	
RD4		=	MAC1WORKBASE+0x430	
RD5		=	MAC1WORKBASE+0x440		
RD6		=	MAC1WORKBASE+0x450	
RD7		=	MAC1WORKBASE+0x460	
RD8		=	MAC1WORKBASE+0x470
RD9		=	MAC1WORKBASE+0x480	
RD10		=	MAC1WORKBASE+0x490	
RD11		=	MAC1WORKBASE+0x4A0


RD31		=	MAC2WORKBASE+0x400		
RD32		=	MAC2WORKBASE+0x410	
RD33		=	MAC2WORKBASE+0x420	
RD34		=	MAC2WORKBASE+0x430	
RD35		=	MAC2WORKBASE+0x440		
RD36		=	MAC2WORKBASE+0x450	
RD37		=	MAC2WORKBASE+0x460	
RD38		=	MAC2WORKBASE+0x470
RD39		=	MAC2WORKBASE+0x480	
RD40		=	MAC2WORKBASE+0x490	
RD41		=	MAC2WORKBASE+0x4A0




SETUPBUFF	=	MACXmitBuffer	
TB1Buff		=	MACXmitBuffer+0x100	
TB2Buff		=	MACXmitBuffer+0x500
TB3Buff		=	MACXmitBuffer+0x900	
TB4Buff		=	MACXmitBuffer+0xD00
TB5Buff		=	MACXmitBuffer+0x1100
TB6Buff		=	MACXmitBuffer+0x1500	
TB7Buff		=	MACXmitBuffer+0x1900
TB8Buff		=	MACXmitBuffer+0x1d00	

#MAC2
SETUPBUFFMAC2	=	MAC2XmitBuffer	
TB21Buff		=	MAC2XmitBuffer+0x100	
TB22Buff		=	MAC2XmitBuffer+0x500
TB23Buff		=	MAC2XmitBuffer+0x900	
TB24Buff		=	MAC2XmitBuffer+0xD00
TB25Buff		=	MAC2XmitBuffer+0x1100
TB26Buff		=	MAC2XmitBuffer+0x1500	
TB27Buff		=	MAC2XmitBuffer+0x1900
TB28Buff		=	MAC2XmitBuffer+0x1d00

RB1Buff		=	MACRecvBuffer	
RB2Buff		=	MACRecvBuffer+0x400	
RB3Buff		=	MACRecvBuffer+0x800	
RB4Buff		=	MACRecvBuffer+0xC00	
RB5Buff		=	MACRecvBuffer+0x1000	
RB6Buff		=	MACRecvBuffer+0x1400	
RB7Buff		=	MACRecvBuffer+0x1800	
RB8Buff		=	MACRecvBuffer+0x1C00	


RB21Buff		=	MAC2RecvBuffer	
RB22Buff		=	MAC2RecvBuffer+0x400	
RB23Buff		=	MAC2RecvBuffer+0x800	
RB24Buff		=	MAC2RecvBuffer+0xC00	
RB25Buff		=	MAC2RecvBuffer+0x1000	
RB26Buff		=	MAC2RecvBuffer+0x1400	
RB27Buff		=	MAC2RecvBuffer+0x1800	
RB28Buff		=	MAC2RecvBuffer+0x1C00

#	.end     




